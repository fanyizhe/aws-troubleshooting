{"version":3,"sources":["testSSH/CheckEC2Status.js","testSSH/CheckEC2StatusUI.js","testSSH/QandA.js","testSSH/index.js","header/Menu.js","header/index.js","App.js","serviceWorker.js","index.js"],"names":["updateData","valueRows","name","status","reason","map","row","rows","CheckEC2Status","React","useState","ip","accessKeyId","accessSecret","region","loading","spin","JSON","parse","stringify","values","setValues","ec2","AWS","EC2","apiVersion","secretAccessKey","handleChange","value","event","target","handleClick","params","Filters","describeInstances","err","data","Reservations","length","ec2InstanceId","Instances","InstanceId","ec2SubnetId","SubnetId","ec2SecurityGroups","SecurityGroups","ec2VpcId","VpcId","window","fetch","then","res","json","result","currentIp","securityGroups","flag","countTotal","paramsSG","GroupIds","GroupId","describeSecurityGroups","inbound_rules","IpPermissions","inbound_rule","IpProtocol","IpRanges","ipRange","Matcher","CidrIp","contains","FromPort","ToPort","checkEC2SecurityGroups","subnetId","paramsACL","describeNetworkAcls","aclRules","NetworkAcls","Entries","ingressACLs","engressACLs","aclRule","Egress","push","isAllow","ingressACL","Protocol","CidrBlock","RuleAction","PortRange","From","To","checkVPCACL","vpcId","paramsIGW","describeRouteTables","routes","RouteTables","Routes","route","GatewayId","match","DestinationCidrBlock","checkIGW","InstanceIds","describeInstanceStatus","instanceState","InstanceStatuses","InstanceState","Name","instanceStatus","InstanceStatus","Status","systemStatus","SystemStatus","checkEC2Status","getConsoleOutput","undefined","Output","commonContent","replace","username","Buffer","from","toString","checkEC2UsernameAndSystem","EC2Exist","PublicIpAddress","useStyles","makeStyles","theme","root","width","marginTop","spacing","overflowX","table","minWidth","container","display","flexWrap","textField","marginLeft","marginRight","dense","menu","button","margin","div","input","regions","label","CheckEC2StatusUI","props","classes","className","noValidate","autoComplete","id","placeholder","onChange","select","SelectProps","MenuProps","option","key","style","fullWidth","type","variant","color","onClick","height","href","component","scope","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","QandA","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","Typography","ExpansionPanelDetails","content","flexGrow","backgroundColor","palette","background","default","padding","breakpoints","up","TestSSH","CssBaseline","Container","maxWidth","drawer","flexShrink","appBar","menuButton","toolbar","mixins","drawerPaper","ResponsiveDrawer","useTheme","mobileOpen","setMobileOpen","handleDrawerToggle","Divider","List","Link","ListItem","ListItemText","primary","AppBar","position","Toolbar","IconButton","aria-label","edge","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","Header","App","path","exact","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5159e936.chunk.js","sourcesContent":["import React from 'react';\r\nimport CheckEC2StatusUI from './CheckEC2StatusUI';\r\nimport AWS from 'aws-sdk';\r\nimport Matcher from 'cidr-matcher';\r\n\r\n\r\nfunction updateData(valueRows, name, status, reason) {\r\n  return valueRows.map( row => {\r\n    if (row.name === name) {\r\n      row.status = status;\r\n      row.reason = reason;\r\n      return row;\r\n    }\r\n    return row;\r\n  });\r\n}\r\n\r\nconst rows = [\r\n  {name:\"该账号下是否存在该EC2\",status:\"\",reason:\"\"},\r\n  {name:\"本机公网IP\",status:\"\",reason:\"\"},\r\n  {name:\"默认登录用户名( 适用部分官方AMI )\",status:\"\",reason:\"\"},\r\n  {name:\"ACL检查\",status:\"\",reason:\"\"},\r\n  {name:\"路由表配置检查\",status:\"\",reason:\"\"},\r\n  {name:\"EC2安全组检查\",status:\"\",reason:\"\"},\r\n  {name:\"EC2运行状态检查\",status:\"\",reason:\"\"},\r\n  \r\n]\r\n\r\nexport default function CheckEC2Status() {\r\n  const [values, setValues] = React.useState({\r\n    ip: '',\r\n    accessKeyId: '',\r\n    accessSecret: '',\r\n    region: '',\r\n    loading: 0,\r\n    spin: \"none\",\r\n    rows: JSON.parse(JSON.stringify(rows))\r\n  });\r\n  \r\n\r\n  var ec2 = new AWS.EC2({\r\n    apiVersion: '2016-11-15',\r\n    accessKeyId: values.accessKeyId,\r\n    secretAccessKey:values.accessSecret,\r\n    region: values.region\r\n  });\r\n\r\n  const checkEC2UsernameAndSystem = (ec2InstanceId) => {\r\n    let params = {\r\n      InstanceId: ec2InstanceId\r\n     };\r\n    ec2.getConsoleOutput(params, function(err, data) {\r\n      if (err){\r\n        updateData(values.rows, \"默认登录用户名( 适用部分官方AMI )\", \"FAILED\", \"无法调用API( 网络或权限问题 )\");\r\n      }\r\n      else {\r\n        if (data.Output !== undefined) {\r\n          let commonContent = data.Output.replace(/\\s/g, '+');\r\n          commonContent = Buffer.from(commonContent, 'base64').toString();\r\n          const username = commonContent.match(/for user ([a-zA-Z0-9-]*)/)\r\n          if (username !== null) {\r\n            updateData(values.rows, \"默认登录用户名( 适用部分官方AMI )\", username[1], \"\");\r\n          } else {\r\n            updateData(values.rows, \"默认登录用户名( 适用部分官方AMI )\", \"\", \"无法通过EC2日志找到系统默认用户名，请参阅下方文档“首次登录未成功”\");\r\n          }\r\n        } else {\r\n          updateData(values.rows, \"默认登录用户名( 适用部分官方AMI )\", \"\", \"无法读取系统日志,系统日志还未准备好\");\r\n        }\r\n        \r\n      }\r\n      values.loading -= 1;\r\n      setValues({ ...values, 'loading': values.loading, 'rows': values.rows,'spin': \"\" }); \r\n      if (values.loading === 0) {\r\n        setValues({ ...values,'spin': \"none\"});\r\n      }    \r\n    });\r\n  }\r\n\r\n  //Check EC2's running status and 2 health status \r\n  const checkEC2Status = (ec2InstanceId) => {\r\n\r\n    let params = {\r\n      InstanceIds: [\r\n        ec2InstanceId\r\n      ]\r\n     };\r\n    ec2.describeInstanceStatus(params, function(err, data) {\r\n      if (err) {\r\n        updateData(values.rows, \"EC2运行状态检查\", \"FAILED\", \"无法调用API( 网络或权限问题 )\");\r\n\r\n      }\r\n      else {\r\n        const instanceState = data.InstanceStatuses[0].InstanceState.Name;\r\n        const instanceStatus = data.InstanceStatuses[0].InstanceStatus.Status;\r\n        const systemStatus = data.InstanceStatuses[0].SystemStatus.Status;\r\n        if (instanceState !== 'running') {\r\n          updateData(values.rows, \"EC2运行状态检查\", \"FAILED\", \"该EC2不在running状态中\");\r\n        } else if (instanceStatus !== 'ok') {\r\n          updateData(values.rows, \"EC2运行状态检查\", \"FAILED\", \"Instance Status检查失败\");\r\n        } else if (systemStatus !== 'ok') {\r\n          updateData(values.rows, \"EC2运行状态检查\", \"FAILED\", \"System Status检查失败\");\r\n        } else {\r\n          updateData(values.rows, \"EC2运行状态检查\", \"SUCCESS\", \"EC2状态正常\");\r\n        }\r\n      };  \r\n      values.loading -= 1;\r\n      setValues({ ...values, 'loading': values.loading, 'rows': values.rows,'spin': \"\" });\r\n      if (values.loading === 0) {\r\n        setValues({ ...values,'spin': \"none\"});\r\n      }\r\n    });\r\n  }\r\n\r\n  //Check the security groups \r\n  const checkEC2SecurityGroups = (securityGroups, currentIp) => {\r\n\r\n    var flag = \"FAILED\";\r\n    var countTotal = securityGroups.length;\r\n    for (let securityGroup of securityGroups) {\r\n      \r\n      let paramsSG = {\r\n        GroupIds:[\r\n          securityGroup.GroupId\r\n        ],\r\n      }\r\n      ec2.describeSecurityGroups(paramsSG, function(err, data) {\r\n        if (err) {  \r\n          updateData(values.rows, \"EC2安全组检查\", \"FAILED\", \"无法调用API( 网络或权限问题 )\");\r\n\r\n        } else {\r\n          let inbound_rules = data.SecurityGroups[0].IpPermissions;\r\n          for (let inbound_rule of inbound_rules) {\r\n            if (inbound_rule.IpProtocol === '-1') {\r\n              for (let ipRange of inbound_rule.IpRanges) {\r\n                let matcher = new Matcher([ipRange.CidrIp]);\r\n                if(matcher.contains(currentIp)) {\r\n                  flag = \"SUCCESS\";\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            else if (\r\n              inbound_rule.IpProtocol === 'tcp' & \r\n              inbound_rule.FromPort <= 22 & \r\n              inbound_rule.ToPort >= 22\r\n            ){\r\n              for (let ipRange of inbound_rule.IpRanges) {\r\n                let matcher = new Matcher([ipRange.CidrIp]);\r\n                if(matcher.contains(currentIp)) {\r\n                  flag = \"SUCCESS\";\r\n                  break;\r\n                }\r\n              }\r\n              \r\n            }\r\n          }\r\n          countTotal--;\r\n          if (countTotal === 0){\r\n            if( flag === \"FAILED\") {\r\n              updateData(values.rows, \"EC2安全组检查\", \"FAILED\", \"检查安全组规则中是否包含22端口，或CIDR范围不包含当前IP\");\r\n            } else{\r\n              updateData(values.rows, \"EC2安全组检查\", \"SUCCESS\", \"安全组中22端口已打开\");\r\n            }\r\n          }\r\n        }\r\n        values.loading -= 1;\r\n        setValues({ ...values, 'loading': values.loading, 'rows': values.rows,'spin': \"\" });\r\n        if (values.loading === 0) {\r\n          setValues({ ...values,'spin': \"none\"});\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  //Check the network ACL\r\n  const checkVPCACL = (subnetId, currentIp) => {\r\n    let paramsACL = {\r\n      Filters: [\r\n        {\r\n            'Name': 'association.subnet-id',\r\n            'Values': [subnetId]\r\n        },\r\n      ],\r\n    }\r\n    ec2.describeNetworkAcls(paramsACL, function(err, data) {\r\n      if (err) {\r\n        updateData(values.rows, \"ACL检查\", \"FAILED\", \"无法调用API( 网络或权限问题 )\");\r\n\r\n      } else {\r\n        let aclRules = data.NetworkAcls[0].Entries;\r\n        let ingressACLs = [], engressACLs = [];\r\n        for (let aclRule of aclRules) {\r\n          aclRule.Egress ? engressACLs.push(aclRule) : ingressACLs.push(aclRule);\r\n        }\r\n        let isAllow = \"init\";\r\n        for (let ingressACL of ingressACLs) {\r\n\r\n          if (isAllow === \"init\") {\r\n            if (ingressACL.Protocol === '-1') {\r\n              let matcher = new Matcher([ingressACL.CidrBlock]);\r\n              if(!matcher.contains(currentIp)) {\r\n                break;\r\n              }\r\n              isAllow = ingressACL.RuleAction;\r\n            } \r\n            else if (\r\n              ingressACL.Protocol === '6' & \r\n              ingressACL.PortRange.From <= 22 & \r\n              ingressACL.PortRange.To >= 22)\r\n            {\r\n              let matcher = new Matcher([ingressACL.CidrBlock]);\r\n              if(!matcher.contains(currentIp)) {\r\n                break;\r\n              }\r\n              isAllow = ingressACL.RuleAction;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } //for\r\n        if (isAllow === 'allow') {\r\n          updateData(values.rows, \"ACL检查\", \"SUCCESS\", \"NETWORK ACL未禁止22端口\");\r\n        } else {\r\n          updateData(values.rows, \"ACL检查\", \"FAILED\", \"该EC2所处VPCSubnet的NETWORK ACL禁止22端口, 或CIDR范围不包含当前IP\");\r\n        }\r\n      }\r\n      values.loading -= 1;\r\n      setValues({ ...values, 'loading': values.loading, 'rows': values.rows,'spin': \"\" });\r\n      if (values.loading === 0) {\r\n        setValues({ ...values,'spin': \"none\"});\r\n      }\r\n    })\r\n  };\r\n\r\n  //Check whether the route table contains Internet Gateway or not.\r\n  const checkIGW = (vpcId, currentIp) => {\r\n\r\n    let paramsIGW = {\r\n      Filters:[\r\n        {\r\n            'Name': 'vpc-id',\r\n            'Values': [vpcId]\r\n        },\r\n      ],\r\n    }\r\n    ec2.describeRouteTables(paramsIGW, function(err, data) {\r\n      if (err) {\r\n        updateData(values.rows, \"路由表配置检查\", \"FAILED\", \"无法调用API( 网络或权限问题 )\");\r\n      } else {\r\n        let routeTable = data.RouteTables;\r\n        let routes = routeTable[0].Routes;\r\n        let flag = \"FAILED\";\r\n        for (let route of routes) {\r\n          if (route.GatewayId.match(\"igw\")) {\r\n            let matcher = new Matcher([route.DestinationCidrBlock]);\r\n            if(!matcher.contains(currentIp)) break;\r\n            flag = \"SUCCESS\";\r\n            break;\r\n          }\r\n        }\r\n        if (flag === \"FAILED\") {\r\n          updateData(values.rows, \"路由表配置检查\", \"FAILED\", \"该EC2所使用的路由表不存在Internet Gateway, 或CIDR范围不包含当前IP\");\r\n        } else {\r\n          updateData(values.rows, \"路由表配置检查\", \"SUCCESS\", \"该EC2所使用的路由表存在Internet Gateway\");\r\n        }\r\n        //setValues({ ...values, 'rows': values.rows });\r\n      }\r\n      values.loading -= 1;\r\n      setValues({ ...values, 'loading': values.loading, 'rows': values.rows,'spin': \"\" });\r\n      if (values.loading === 0) {\r\n        setValues({ ...values,'spin': \"none\"});\r\n      }\r\n    })\r\n  };\r\n\r\n  const handleChange = (value) => event => {\r\n    setValues({ ...values, [value]: event.target.value });\r\n  };\r\n  \r\n  //Main function of ec2 check\r\n  const handleClick = () => {\r\n    values.loading =2 ;\r\n    values.rows = JSON.parse(JSON.stringify(rows));\r\n    setValues({ ...values,'rows': values.rows, 'spin': \"\", 'loading': values.loading });\r\n    let params = {\r\n      Filters: [\r\n        {\r\n          'Name': 'ip-address',\r\n          'Values': [values.ip]\r\n        }\r\n      ]\r\n    }\r\n\r\n\r\n    ec2.describeInstances(params, function(err, data) {\r\n      if (err) {\r\n        updateData(values.rows, \"该账号下是否存在该EC2\", \"FAILED\", \"输入的Region或者Access Key相关信息有误，或者是无法调用API( 网络或权限问题 )\");\r\n        //setValues({ ...values, 'rows': values.rows });\r\n      } else {\r\n\r\n        if (data.Reservations.length !== 0) {          \r\n          const ec2InstanceId = data.Reservations[0].Instances[0].InstanceId;\r\n          const ec2SubnetId = data.Reservations[0].Instances[0].SubnetId;\r\n          const ec2SecurityGroups = data.Reservations[0].Instances[0].SecurityGroups;\r\n          const ec2VpcId = data.Reservations[0].Instances[0].VpcId;\r\n          updateData(values.rows, \"该账号下是否存在该EC2\", \"SUCCESS\", \"\");\r\n          values.loading += (ec2SecurityGroups.length + 4);\r\n          setValues({ ...values, 'loading': values.loading});\r\n          window.fetch(\"https://api.ipify.org?format=json\").then(res => res.json()).then((result) => {\r\n            const currentIp = result.ip;\r\n            updateData(values.rows, \"本机公网IP\", currentIp, \"\");\r\n            checkEC2SecurityGroups(ec2SecurityGroups, currentIp);\r\n            checkVPCACL(ec2SubnetId, currentIp);\r\n            checkIGW(ec2VpcId, currentIp);\r\n          })\r\n          checkEC2Status(ec2InstanceId);\r\n          checkEC2UsernameAndSystem(ec2InstanceId);\r\n        }\r\n        else {\r\n          let params2 = {}\r\n          ec2.describeInstances(params2, function(err, data){\r\n            if (err) {\r\n              updateData(values.rows, \"该账号下是否存在该EC2\", \"FAILED\", \"输入的Region或者Access Key相关信息有误，或者是无法调用API( 网络或权限问题 )\");\r\n            } else {\r\n              let EC2Exist = false\r\n              for (let instance of data.Reservations) {\r\n                if (instance.Instances[0].PublicIpAddress === values.ip) {\r\n                  updateData(values.rows, \"该账号下是否存在该EC2\", \"FAILED\", \"该区域内存在该EC2，但该EC2无法被外网访问到。\");\r\n                  EC2Exist = true\r\n                  break;\r\n                }\r\n              }\r\n              if (!EC2Exist){ updateData(values.rows, \"该账号下是否存在该EC2\", \"FAILED\", \"输入的IP地址有误，该区域不存在该EC2\")};\r\n            }\r\n            setValues({ ...values, 'loading': values.loading, 'rows': values.rows });\r\n          })     \r\n        }\r\n      }\r\n      values.loading -= 2;\r\n      setValues({ ...values, 'loading': values.loading, 'rows': values.rows });\r\n      \r\n\r\n    });\r\n\r\n  };\r\n\r\n  return (\r\n      <CheckEC2StatusUI \r\n        values = {values}\r\n        handleChange = {handleChange}\r\n        handleClick = {handleClick}\r\n      />\r\n    \r\n  );\r\n}","import React, { Fragment } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ReactLoading from 'react-loading';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(3),\r\n    overflowX: 'auto',\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 200,\r\n  },\r\n  dense: {\r\n    marginTop: 19,\r\n  },\r\n  menu: {\r\n    width: 200,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  div: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n}));\r\n\r\nconst regions = [\r\n  {\r\n    value: 'cn-north-1',\r\n    label: 'China (Beijing)',\r\n  },\r\n  {\r\n    value: 'cn-northwest-1',\r\n    label: 'China (Ningxia)',\r\n  },\r\n  {\r\n    value: 'us-east-1',\r\n    label: 'US East (N. Virginia)',\r\n  },\r\n  {\r\n    value: 'us-east-2',\r\n    label: 'US East (Ohio)',\r\n  },\r\n  {\r\n    value: 'us-west-1',\r\n    label: 'US West (N. California)',\r\n  },\r\n  {\r\n    value: 'us-west-2',\r\n    label: 'US West (Oregon)',\r\n  },\r\n  {\r\n    value: 'ap-east-1',\r\n    label: 'Asia Pacific (Hong Kong)',\r\n  },\r\n  {\r\n    value: 'ap-south-1',\r\n    label: 'Asia Pacific (Mumbai)',\r\n  },\r\n  {\r\n    value: 'ap-northeast-2',\r\n    label: 'Asia Pacific (Seoul)',\r\n  },\r\n  {\r\n    value: 'ap-southeast-1',\r\n    label: 'Asia Pacific (Singapore)',\r\n  },\r\n  {\r\n    value: 'ap-southeast-2',\r\n    label: 'Asia Pacific (Sydney)',\r\n  },\r\n  {\r\n    value: 'ap-northeast-1',\r\n    label: 'Asia Pacific (Tokyo)',\r\n  },\r\n  {\r\n    value: 'ca-central-1',\r\n    label: 'Canada (Central)',\r\n  },\r\n  {\r\n    value: 'eu-central-1',\r\n    label: 'EU (Frankfurt)',\r\n  },\r\n  {\r\n    value: 'eu-west-1',\r\n    label: 'EU (Ireland)',\r\n  },\r\n  {\r\n    value: 'eu-west-2',\r\n    label: 'EU (London)',\r\n  },\r\n  {\r\n    value: 'eu-west-3',\r\n    label: 'EU (Paris)',\r\n  },\r\n  {\r\n    value: 'eu-north-1',\r\n    label: 'EU (Stockholm)',\r\n  },\r\n  {\r\n    value: 'me-south-1',\r\n    label: 'Middle East (Bahrain)',\r\n  },\r\n  {\r\n    value: 'sa-east-1',\r\n    label: 'South America (Sao Paulo)',\r\n  },\r\n];\r\n\r\nexport default function CheckEC2StatusUI(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Fragment>\r\n      <form className={classes.container} noValidate autoComplete=\"off\">\r\n        <TextField\r\n          id=\"standard-ipaddress\"\r\n          label=\"Public IP Address\"\r\n          placeholder=\"192.168.1.1\"\r\n          className={classes.textField}\r\n          value={props.values.ip}\r\n          onChange={props.handleChange('ip')}\r\n          margin=\"normal\"\r\n        />\r\n        <TextField\r\n          id=\"standard-select-region\"\r\n          select\r\n          label=\"Region\"\r\n          className={classes.textField}\r\n          value={props.values.region}\r\n          onChange={props.handleChange('region')}\r\n          SelectProps={{\r\n            MenuProps: {\r\n              className: classes.menu,\r\n            },\r\n          }}\r\n          margin=\"normal\"\r\n        >\r\n          {regions.map(option => (\r\n            <MenuItem key={option.value} value={option.value}>\r\n              {option.label}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n        <TextField\r\n          value={props.values.accessKeyId}\r\n          id=\"standard-access-key-id\"\r\n          label=\"Access Key Id\"\r\n          style={{ margin: 8 }}\r\n          //helperText=\"\"\r\n          fullWidth\r\n          margin=\"normal\"\r\n          onChange={props.handleChange('accessKeyId')}\r\n        />\r\n        <TextField\r\n          value={props.values.accessSecret}\r\n          id=\"standard-access-key-secret\"\r\n          label=\"Access Key Secret\"\r\n          style={{ margin: 8 }}\r\n          type=\"password\"\r\n          fullWidth\r\n          margin=\"normal\"\r\n          onChange={props.handleChange('accessSecret')}\r\n        />\r\n        <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={props.handleClick}>\r\n          Start\r\n        </Button>\r\n        <div \r\n          className={classes.div} \r\n          style={{\r\n            display: props.values.spin,\r\n          }}>\r\n            <ReactLoading \r\n              type=\"spin\"\r\n              height={'36.5px'}\r\n              width={'36.5px'}\r\n            />\r\n        </div>\r\n        <div className={classes.div}>\r\n          <a target=\"_blank\" \r\n              href=\"https://docs.aws.amazon.com/zh_cn/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_CreateAccessKey\"\r\n          >找不到您的Access Key ID/Access Key Secret？\r\n          </a>\r\n        </div>\r\n      </form>\r\n      <Paper className={classes.root}>\r\n        <Table className={classes.table}>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>检查项</TableCell>\r\n              <TableCell >检查结果</TableCell>\r\n              <TableCell>原因</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {props.values.rows.map(row => (\r\n              <TableRow key={row.name}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.name}\r\n                </TableCell>\r\n                <TableCell>{row.status}</TableCell>\r\n                <TableCell>{row.reason}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    </Fragment>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    marginTop: theme.spacing(3),\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n}));\r\n\r\nexport default function QandA() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography className={classes.heading}><b>首次连接未成功</b></Typography>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails>\r\n          <Typography >\r\n            1、检查登录密钥是否正确<br /><br />\r\n            2、登录用户名不对<br />\r\n            &nbsp;- 若为AWS官方默认AMI，则默认用户名称为：<br />\r\n            &nbsp;&nbsp;&nbsp;对于 Amazon Linux 2 或 Amazon Linux AMI，用户名称是 ec2-user.<br />\r\n            &nbsp;&nbsp;&nbsp;对于 Centos AMI，用户名称是 centos。<br />\r\n            &nbsp;&nbsp;&nbsp;对于 Debian AMI，用户名称是 admin 或 root。<br />\r\n            &nbsp;&nbsp;&nbsp;对于 Fedora AMI，用户名为 ec2-user 或 fedora。<br />\r\n            &nbsp;&nbsp;&nbsp;对于 RHEL AMI，用户名称是 ec2-user 或 root。<br />\r\n            &nbsp;&nbsp;&nbsp;对于 SUSE AMI，用户名称是 ec2-user 或 root。<br />\r\n            &nbsp;&nbsp;&nbsp;对于 Ubuntu AMI，用户名称是 ubuntu。<br />\r\n            &nbsp;&nbsp;&nbsp;详情参见：<a target=\"_blank\" href=\"https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/connection-prereqs.html#connection-prereqs-get-info-about-instance\">获取有关您的实例的信息</a><br />\r\n            &nbsp;- 若为非官方默认AMI，请参考文档或联系负责人。<br /><br />\r\n            3、EC2暂时处于pending状态还未启动完成。<br /><br />\r\n            4、目前您处于酒店等公共WIFI区域，该公共网络封禁了22端口。<br /><br />\r\n            5、您EC2的IP被国内墙了。<br /><br />\r\n            若以上均不符合您的情况，请联系我们的工程师帮助您进行问题排查\r\n          </Typography>\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel2a-content\"\r\n          id=\"panel2a-header\"\r\n        >\r\n          <Typography className={classes.heading}><b>曾经登录成功过，现在无法连接了</b></Typography>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails>\r\n          <Typography>\r\n            以下几条可能的情况或有助于您进行问题的排查: <br /><br />\r\n            1、报错提示：shell request failed on channel 0 <br />\r\n            &nbsp;&nbsp;&nbsp;- 系统进程数小了，需要修改/etc/security/limits.d/20-nproc.conf文件中的值 <br /><br />\r\n            2、内存不够，导致sshd服务无法正常工作。 <br /><br />\r\n            3、频繁登录或者连接数过多达到上限 <br />\r\n            &nbsp;&nbsp;&nbsp;- 查看一下/var/log/secure 文件，看是否有频繁登录的情况。 <br />\r\n            &nbsp;&nbsp;&nbsp;- 查看一下/etc/ssh/sshd_config中的MaxStartups设置，增大最大连接数并重启sshd服务，并在每次登录之后exit登出。 <br /><br />\r\n            4、目前您处于酒店等公共WIFI区域，该公共网络封禁了22端口。<br /><br />\r\n            5、您EC2的IP被国内墙了。<br /><br />\r\n            若以上均不符合您的情况，请联系我们的工程师帮助您进行问题排查\r\n          </Typography>\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport CheckEC2Status from './CheckEC2Status';\r\nimport QandA from './QandA';\r\n//import FindKeySecret from './FindKeySecret'\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n\r\n  },\r\n  container: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.default,\r\n    padding: theme.spacing(3),\r\n    marginTop: theme.spacing(6),\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: drawerWidth,\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function TestSSH() {\r\n  const classes = useStyles();\r\n\r\n    return(\r\n      <div className={classes.root}>\r\n        <div className={classes.content}>\r\n          <CssBaseline />\r\n          <Container maxWidth=\"lg\" className={classes.container}>\r\n            <Typography component=\"div\" >\r\n              <h1>测试SSH连接</h1>\r\n              <div>本网站通过调用aws的API获取您EC2的配置信息，以此来检验是否存在导致无法进行SSH登录的配置信息。</div>\r\n              <div>本网站同样列举了其他的一些可能的故障原因，在下方“其他可能的问题原因Q&A中”。</div>\r\n              <div>若本网站的功能无法解决您的问题，请联系我们的工程师进行排查。</div><br />\r\n              <b>声明：</b>本网站为GitHub Pages托管的静态页面。纯开源，源代码在https://github.com/lab798/aws-troubleshooting。不存储缓存，不保留任何Access Key ID/Access Key Secret信息。\r\n            </Typography>\r\n          </Container>\r\n          {/*<Container maxWidth=\"lg\" className={classes.container}> \r\n            <FindKeySecret />\r\n          </Container>\r\n          */}\r\n          <Container maxWidth=\"lg\" className={classes.container}>\r\n            <Typography component=\"div\" style={{ backgroundColor: '#cfe8fc' }} >\r\n              <CheckEC2Status />\r\n            </Typography>\r\n          </Container>\r\n          <Container maxWidth=\"lg\" className={classes.container}>\r\n            <h1>其他可能的问题原因Q&A：</h1>\r\n            <QandA />\r\n          </Container>\r\n        </div>\r\n      </div>\r\n    )\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Link from '@material-ui/core/Link';\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    drawer: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        },\r\n    },\r\n    appBar: {\r\n        marginLeft: drawerWidth,\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n        },\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n}));\r\n\r\nfunction ResponsiveDrawer(props) {\r\n    const { container } = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n    function handleDrawerToggle() {\r\n        setMobileOpen(!mobileOpen);\r\n    }\r\n\r\n\r\n    const drawer = (\r\n        <div>\r\n            <div className={classes.toolbar} />\r\n            <Divider />\r\n            <List>\r\n                <Link href={'/testSSH'}>\r\n                    <ListItem button key={'检测SSH连接'}>\r\n                        <ListItemText primary={'检测SSH连接'} />\r\n                    </ListItem>\r\n                </Link>\r\n            </List>\r\n            <Divider />\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        edge=\"start\"\r\n                        onClick={handleDrawerToggle}\r\n                        className={classes.menuButton}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" noWrap>\r\n                        AWS服务故障检测\r\n            \r\n          </Typography>\r\n\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n            <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n                {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n                <Hidden smUp implementation=\"css\">\r\n                    <Drawer\r\n                        container={container}\r\n                        variant=\"temporary\"\r\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                        open={mobileOpen}\r\n                        onClose={handleDrawerToggle}\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        ModalProps={{\r\n                            keepMounted: true, // Better open performance on mobile.\r\n                        }}\r\n                    >\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n                <Hidden xsDown implementation=\"css\">\r\n                    <Drawer\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        variant=\"permanent\"\r\n                        open\r\n                    >\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nResponsiveDrawer.propTypes = {\r\n    /**\r\n     * Injected by the documentation to work in an iframe.\r\n     * You won't need it on your project.\r\n     */\r\n    container: PropTypes.instanceOf(typeof Element === 'undefined' ? Object : Element),\r\n};\r\n\r\nexport default ResponsiveDrawer;","import React from 'react';\r\nimport ResponsiveDrawer from './Menu'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div>\r\n            <ResponsiveDrawer />\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport TestSSH from './testSSH';\nimport Header from './header';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <BrowserRouter>\n        <Route path='/' exact component={TestSSH}></Route>\n        <Route path='/aws-troubleshooting' exact component={TestSSH}></Route>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}